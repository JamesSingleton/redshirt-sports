/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Twitter = {
  _type: 'twitter'
  id?: string
}

export type Top25Table = {
  _type: 'top25Table'
  votes?: Array<{
    voterName?: string
    voterAffiliation?: string
    teams?: Array<{
      _ref: string
      _type: 'reference'
      _weak?: boolean
      _key: string
      [internalGroqTypeReferenceTo]?: 'school'
    }>
    _key: string
  }>
}

export type SocialMedia = {
  _type: 'socialMedia'
  name:
    | 'Email'
    | 'Twitter'
    | 'Facebook'
    | 'Instagram'
    | 'Website'
    | 'Spotify Podcast'
    | 'Apple Podcast'
    | 'Overcast Podcast'
  url?: string
}

export type SocialLinks = {
  _type: 'socialLinks'
  twitter?: string
  facebook?: string
  youtube?: string
}

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
      listItem?: 'bullet' | 'number'
      markDefs?: Array<
        | {
            href?: string
            blank?: boolean
            _type: 'link'
            _key: string
          }
        | {
            reference?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'post'
            }
            _type: 'internalLink'
            _key: string
          }
      >
      level?: number
      _type: 'block'
      _key: string
    }
  | {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      caption: string
      attribution: string
      _type: 'image'
      _key: string
    }
  | ({
      _key: string
    } & Twitter)
  | ({
      _key: string
    } & Top25Table)
  | ({
      _key: string
    } & Table)
>

export type Settings = {
  _id: string
  _type: 'settings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  label: string
  siteTitle: string
  siteDescription: string
  logo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  defaultOpenGraphImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  contactEmail?: string
  socialLinks?: {
    twitter?: string
    facebook?: string
    youtube?: string
  }
}

export type Navbar = {
  _id: string
  _type: 'navbar'
  _createdAt: string
  _updatedAt: string
  _rev: string
  label: string
  columns?: Array<
    | {
        title?: string
        links: Array<{
          name?: string
          description?: string
          url?: CustomUrl
          _type: 'navbarColumnLink'
          _key: string
        }>
        _type: 'navbarColumn'
        _key: string
      }
    | {
        name?: string
        url?: CustomUrl
        _type: 'navbarLink'
        _key: string
      }
  >
}

export type Footer = {
  _id: string
  _type: 'footer'
  _createdAt: string
  _updatedAt: string
  _rev: string
  label: string
  subtitle?: string
  columns?: Array<{
    title?: string
    links?: Array<{
      name?: string
      url?: CustomUrl
      _type: 'footerColumnLink'
      _key: string
    }>
    _type: 'footerColumn'
    _key: string
  }>
}

export type CustomUrl = {
  _type: 'customUrl'
  type: 'internal' | 'external'
  openInNewTab?: boolean
  external?: string
  href?: string
  internalType?: 'reference' | 'custom'
  internal?:
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'post'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'division'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'conference'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'legal'
      }
  internalUrl?: string
}

export type Membership = {
  _id: string
  _type: 'membership'
  _createdAt: string
  _updatedAt: string
  _rev: string
  school: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'school'
  }
  conference: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'conference'
  }
  sport: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'sport'
  }
}

export type Tag = {
  _id: string
  _type: 'tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name: string
  slug: Slug
}

export type School = {
  _id: string
  _type: 'school'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name: string
  shortName?: string
  abbreviation?: string
  nickname?: string
  image: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    _type: 'image'
  }
  top25VotingEligible?: boolean
  division: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'division'
  }
  conference: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'conference'
  }
}

export type Redirect = {
  _id: string
  _type: 'redirect'
  _createdAt: string
  _updatedAt: string
  _rev: string
  source: string
  destination: string
  permanent?: boolean
}

export type Legal = {
  _id: string
  _type: 'legal'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  slug: Slug
  body: BlockContent
}

export type Post = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  slug: Slug
  author?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'author'
  }
  authors: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'author'
  }>
  publishedAt: string
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    attribution: string
    _type: 'image'
  }
  sport?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'sport'
  }
  division?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'division'
  }
  sportSubgrouping?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'sportSubgrouping'
  }
  conferences?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'conference'
  }>
  teams?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'school'
  }>
  tags?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'tag'
  }>
  featuredArticle?: boolean
  excerpt: string
  body: BlockContent
  seoTitle?: string
  seoDescription?: string
  seoImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  ogTitle?: string
  ogDescription?: string
}

export type Conference = {
  _id: string
  _type: 'conference'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name: string
  shortName?: string
  abbreviation?: string
  slug: Slug
  logo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt?: string
    _type: 'image'
  }
  division: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'division'
  }
  sports?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'sport'
  }>
  sportSubdivisionAffiliations?: Array<{
    sport: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sport'
    }
    subgrouping: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sportSubgrouping'
    }
    _type: 'sportSubgroupingAffiliation'
    _key: string
  }>
}

export type SportSubgrouping = {
  _id: string
  _type: 'sportSubgrouping'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name: string
  shortName?: string
  slug?: Slug
  applicableSports: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'sport'
  }>
}

export type Sport = {
  _id: string
  _type: 'sport'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  slug: Slug
}

export type Division = {
  _id: string
  _type: 'division'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name: string
  title: string
  heading: string
  longName: string
  slug: Slug
  description?: string
  logo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    alt: string
    _type: 'image'
  }
}

export type Author = {
  _id: string
  _type: 'author'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name: string
  slug: Slug
  archived?: boolean
  roles: Array<
    | 'Contributor'
    | 'Correspondent'
    | 'Editor'
    | 'Founder'
    | 'Guest Writer'
    | 'Historian'
    | 'Podcast Host'
    | 'Recruiting Analyst'
    | 'Senior Writer'
    | 'Transfer Portal Analyst'
  >
  image: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  biography: string
  socialMedia: Array<
    {
      _key: string
    } & SocialMedia
  >
  socialLinks?: {
    twitter?: string
    facebook?: string
    youtube?: string
  }
}

export type Table = {
  _type: 'table'
  rows?: Array<
    {
      _key: string
    } & TableRow
  >
}

export type TableRow = {
  _type: 'tableRow'
  cells?: Array<string>
}

export type MediaTag = {
  _id: string
  _type: 'media.tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Slug
}

export type SanityAssistInstructionTask = {
  _type: 'sanity.assist.instructionTask'
  path?: string
  instructionKey?: string
  started?: string
  updated?: string
  info?: string
}

export type SanityAssistTaskStatus = {
  _type: 'sanity.assist.task.status'
  tasks?: Array<
    {
      _key: string
    } & SanityAssistInstructionTask
  >
}

export type SanityAssistSchemaTypeAnnotations = {
  _type: 'sanity.assist.schemaType.annotations'
  title?: string
  fields?: Array<
    {
      _key: string
    } & SanityAssistSchemaTypeField
  >
}

export type SanityAssistOutputType = {
  _type: 'sanity.assist.output.type'
  type?: string
}

export type SanityAssistOutputField = {
  _type: 'sanity.assist.output.field'
  path?: string
}

export type SanityAssistInstructionContext = {
  _type: 'sanity.assist.instruction.context'
  reference: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'assist.instruction.context'
  }
}

export type AssistInstructionContext = {
  _id: string
  _type: 'assist.instruction.context'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  context?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: null
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type SanityAssistInstructionUserInput = {
  _type: 'sanity.assist.instruction.userInput'
  message: string
  description?: string
}

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<
    | {
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }
    | ({
        _key: string
      } & SanityAssistInstructionFieldRef)
    | ({
        _key: string
      } & SanityAssistInstructionContext)
    | ({
        _key: string
      } & SanityAssistInstructionUserInput)
  >
  style?: 'normal'
  listItem?: never
  markDefs?: null
  level?: number
  _type: 'block'
  _key: string
}>

export type SanityAssistInstructionFieldRef = {
  _type: 'sanity.assist.instruction.fieldRef'
  path?: string
}

export type SanityAssistInstruction = {
  _type: 'sanity.assist.instruction'
  prompt?: SanityAssistInstructionPrompt
  icon?: string
  title?: string
  userId?: string
  createdById?: string
  output?: Array<
    | ({
        _key: string
      } & SanityAssistOutputField)
    | ({
        _key: string
      } & SanityAssistOutputType)
  >
}

export type SanityAssistSchemaTypeField = {
  _type: 'sanity.assist.schemaType.field'
  path?: string
  instructions?: Array<
    {
      _key: string
    } & SanityAssistInstruction
  >
}

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Slug = {
  _type: 'slug'
  current: string
  source?: string
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type AllSanitySchemaTypes =
  | Twitter
  | Top25Table
  | SocialMedia
  | SocialLinks
  | BlockContent
  | Settings
  | Navbar
  | Footer
  | CustomUrl
  | Membership
  | Tag
  | School
  | Redirect
  | Legal
  | Post
  | Conference
  | SportSubgrouping
  | Sport
  | Division
  | Author
  | Table
  | TableRow
  | MediaTag
  | SanityAssistInstructionTask
  | SanityAssistTaskStatus
  | SanityAssistSchemaTypeAnnotations
  | SanityAssistOutputType
  | SanityAssistOutputField
  | SanityAssistInstructionContext
  | AssistInstructionContext
  | SanityAssistInstructionUserInput
  | SanityAssistInstructionPrompt
  | SanityAssistInstructionFieldRef
  | SanityAssistInstruction
  | SanityAssistSchemaTypeField
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ../web/lib/sanity.queries.ts
// Variable: heroPostsQuery
// Query: *[_type == "post" && featuredArticle != true] | order(publishedAt desc)[0...3] {    _id,  title,  publishedAt,  mainImage{    ...,    "alt": coalesce(asset->altText, caption, "Image-Broken"),    "credit": coalesce(asset->creditLine, attribution, "Unknown"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },  division->{    name,    "slug": slug.current,    longName  },  conferences[]->{    _id,    name,    shortName,    "slug": slug.current,  },  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),  "slug": slug.current,  "author": author->{name, 'slug': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},  excerpt,}
export type HeroPostsQueryResult = Array<{
  _id: string
  title: string
  publishedAt: string
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    attribution: string
    _type: 'image'
    alt: string
    credit: string
    blurData: string | null
    dominantColor: string | null
  }
  division: {
    name: string
    slug: string
    longName: string
  } | null
  conferences: Array<{
    _id: string
    name: string
    shortName: string | null
    slug: string
  }> | null
  estimatedReadingTime: number
  slug: string
  author: {
    name: string
    slug: string
    archived: boolean | null
    image: {
      asset: {
        _id: string
        _type: 'sanity.imageAsset'
        metadata: SanityImageMetadata | null
        url: string | null
      } | null
    }
  } | null
  excerpt: string
}>
// Variable: latestArticlesForHomePageQuery
// Query: *[_type == "post" && featuredArticle != true] | order(publishedAt desc, _updatedAt desc)[3..6] {    _id,  title,  publishedAt,  mainImage{    ...,    "alt": coalesce(asset->altText, caption, "Image-Broken"),    "credit": coalesce(asset->creditLine, attribution, "Unknown"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },  division->{    name,    "slug": slug.current,    longName  },  conferences[]->{    _id,    name,    shortName,    "slug": slug.current,  },  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),  "slug": slug.current,  "author": author->{name, 'slug': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},  excerpt,}
export type LatestArticlesForHomePageQueryResult = Array<{
  _id: string
  title: string
  publishedAt: string
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    attribution: string
    _type: 'image'
    alt: string
    credit: string
    blurData: string | null
    dominantColor: string | null
  }
  division: {
    name: string
    slug: string
    longName: string
  } | null
  conferences: Array<{
    _id: string
    name: string
    shortName: string | null
    slug: string
  }> | null
  estimatedReadingTime: number
  slug: string
  author: {
    name: string
    slug: string
    archived: boolean | null
    image: {
      asset: {
        _id: string
        _type: 'sanity.imageAsset'
        metadata: SanityImageMetadata | null
        url: string | null
      } | null
    }
  } | null
  excerpt: string
}>
// Variable: postsBySlugQuery
// Query: *[_type == "post" && slug.current == $slug][0]{    _id,  _updatedAt,  title,  publishedAt,  "mainImage": {    "caption": mainImage.caption,    "attribution": mainImage.attribution,    "crop": mainImage.crop,    "hotspot": mainImage.hotspot,    "asset": mainImage.asset->,  },  division->{    name,    "slug": slug.current,  },  conferences[]->{    name,    shortName,    "slug": slug.current,  },  "slug": slug.current,  "author": author->{    name,    'slug': slug.current,    biography,    roles,    socialMedia,    image,    archived,    'collegeOrUniversity': collegeOrUniversity->name  },  authors[]->{    name,    'slug': slug.current,    biography,    roles,    socialMedia,    image,    archived,    'collegeOrUniversity': collegeOrUniversity->name  },  excerpt,  teams[]->{    _id,    name,    shortName,    nickname  },  body[]{    ...,    markDefs[]{      ...,      _type == "internalLink" => {        reference->{          _type,          "slug": slug.current,          "divisionSlug": division->slug.current,        }      },    },    _type == "image" => {      ...,      asset->    },    _type == 'top25Table' => {      ...,      votes[]{        ...,        teams[]->{          _id,          name,          abbreviation,          image        }      }    }  },  featuredArticle,  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),  "wordCount": length(pt::text(body)),  "relatedArticles": *[    _type == "post"    && _id != ^._id    && (count(conferences[@._ref in ^.^.conferences[]._ref]) > 0 || count(tags[@._ref in ^.^.tags[]._ref]) > 0)  ] | order(publishedAt desc, _createdAt desc) {      _id,      title,      publishedAt,      "mainImage": {        "caption": mainImage.caption,        "attribution": mainImage.attribution,        "crop": mainImage.crop,        "hotspot": mainImage.hotspot,        "asset": mainImage.asset->,      },      division->{        name,        "slug": slug.current,      },      conferences[]->{        shortName,        name,        "slug": slug.current,      },      "slug": slug.current,      "author": author->{name},  }[0...3]}
export type PostsBySlugQueryResult = {
  _id: string
  _updatedAt: string
  title: string
  publishedAt: string
  mainImage: {
    caption: string
    attribution: string
    crop: SanityImageCrop | null
    hotspot: SanityImageHotspot | null
    asset: {
      _id: string
      _type: 'sanity.imageAsset'
      _createdAt: string
      _updatedAt: string
      _rev: string
      originalFilename?: string
      label?: string
      title?: string
      description?: string
      altText?: string
      sha1hash?: string
      extension?: string
      mimeType?: string
      size?: number
      assetId?: string
      uploadId?: string
      path?: string
      url?: string
      metadata?: SanityImageMetadata
      source?: SanityAssetSourceData
    } | null
  }
  division: {
    name: string
    slug: string
  } | null
  conferences: Array<{
    name: string
    shortName: string | null
    slug: string
  }> | null
  slug: string
  author: {
    name: string
    slug: string
    biography: string
    roles: Array<
      | 'Contributor'
      | 'Correspondent'
      | 'Editor'
      | 'Founder'
      | 'Guest Writer'
      | 'Historian'
      | 'Podcast Host'
      | 'Recruiting Analyst'
      | 'Senior Writer'
      | 'Transfer Portal Analyst'
    >
    socialMedia: Array<
      {
        _key: string
      } & SocialMedia
    >
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    archived: boolean | null
    collegeOrUniversity: null
  } | null
  authors: Array<{
    name: string
    slug: string
    biography: string
    roles: Array<
      | 'Contributor'
      | 'Correspondent'
      | 'Editor'
      | 'Founder'
      | 'Guest Writer'
      | 'Historian'
      | 'Podcast Host'
      | 'Recruiting Analyst'
      | 'Senior Writer'
      | 'Transfer Portal Analyst'
    >
    socialMedia: Array<
      {
        _key: string
      } & SocialMedia
    >
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    archived: boolean | null
    collegeOrUniversity: null
  }>
  excerpt: string
  teams: Array<{
    _id: string
    name: string
    shortName: string | null
    nickname: string | null
  }> | null
  body: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs: Array<
          | {
              reference: {
                _type: 'post'
                slug: string
                divisionSlug: string | null
              } | null
              _type: 'internalLink'
              _key: string
            }
          | {
              href?: string
              blank?: boolean
              _type: 'link'
              _key: string
            }
        > | null
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset: {
          _id: string
          _type: 'sanity.imageAsset'
          _createdAt: string
          _updatedAt: string
          _rev: string
          originalFilename?: string
          label?: string
          title?: string
          description?: string
          altText?: string
          sha1hash?: string
          extension?: string
          mimeType?: string
          size?: number
          assetId?: string
          uploadId?: string
          path?: string
          url?: string
          metadata?: SanityImageMetadata
          source?: SanityAssetSourceData
        } | null
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        caption: string
        attribution: string
        _type: 'image'
        _key: string
        markDefs: null
      }
    | {
        _key: string
        _type: 'table'
        rows?: Array<
          {
            _key: string
          } & TableRow
        >
        markDefs: null
      }
    | {
        _key: string
        _type: 'top25Table'
        votes: Array<{
          voterName?: string
          voterAffiliation?: string
          teams: Array<{
            _id: string
            name: string
            abbreviation: string | null
            image: {
              asset?: {
                _ref: string
                _type: 'reference'
                _weak?: boolean
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
              }
              media?: unknown
              hotspot?: SanityImageHotspot
              crop?: SanityImageCrop
              caption: string
              _type: 'image'
            }
          }> | null
          _key: string
        }> | null
        markDefs: null
      }
    | {
        _key: string
        _type: 'twitter'
        id?: string
        markDefs: null
      }
  >
  featuredArticle: boolean | null
  estimatedReadingTime: number
  wordCount: number
  relatedArticles: Array<{
    _id: string
    title: string
    publishedAt: string
    mainImage: {
      caption: string
      attribution: string
      crop: SanityImageCrop | null
      hotspot: SanityImageHotspot | null
      asset: {
        _id: string
        _type: 'sanity.imageAsset'
        _createdAt: string
        _updatedAt: string
        _rev: string
        originalFilename?: string
        label?: string
        title?: string
        description?: string
        altText?: string
        sha1hash?: string
        extension?: string
        mimeType?: string
        size?: number
        assetId?: string
        uploadId?: string
        path?: string
        url?: string
        metadata?: SanityImageMetadata
        source?: SanityAssetSourceData
      } | null
    }
    division: {
      name: string
      slug: string
    } | null
    conferences: Array<{
      shortName: string | null
      name: string
      slug: string
    }> | null
    slug: string
    author: {
      name: string
    } | null
  }>
} | null
// Variable: latestDivisionArticlesQuery
// Query: *[_type == "post" && division->name == $division && !(_id in $ids)] | order(publishedAt desc, _updatedAt desc)[0...5] {  _id,  title,  "slug": slug.current,  publishedAt,  "mainImage": {    "caption": mainImage.caption,    "attribution": mainImage.attribution,    "crop": mainImage.crop,    "hotspot": mainImage.hotspot,    "asset": mainImage.asset->,  },  division->{    name,    "slug": slug.current,  },  conferences[]->{    name,    shortName,    "slug": slug.current,  },  "author": author->{name, image, 'slug': slug.current},}
export type LatestDivisionArticlesQueryResult = Array<{
  _id: string
  title: string
  slug: string
  publishedAt: string
  mainImage: {
    caption: string
    attribution: string
    crop: SanityImageCrop | null
    hotspot: SanityImageHotspot | null
    asset: {
      _id: string
      _type: 'sanity.imageAsset'
      _createdAt: string
      _updatedAt: string
      _rev: string
      originalFilename?: string
      label?: string
      title?: string
      description?: string
      altText?: string
      sha1hash?: string
      extension?: string
      mimeType?: string
      size?: number
      assetId?: string
      uploadId?: string
      path?: string
      url?: string
      metadata?: SanityImageMetadata
      source?: SanityAssetSourceData
    } | null
  }
  division: {
    name: string
    slug: string
  } | null
  conferences: Array<{
    name: string
    shortName: string | null
    slug: string
  }> | null
  author: {
    name: string
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
    slug: string
  } | null
}>
// Variable: heroArticleQuery
// Query: *[_type == "post" && featuredArticle != true] | order(publishedAt desc) [0] {    _id,  title,  publishedAt,  mainImage{    ...,    "alt": coalesce(asset->altText, caption, "Image-Broken"),    "credit": coalesce(asset->creditLine, attribution, "Unknown"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },  division->{    name,    "slug": slug.current,    longName  },  conferences[]->{    _id,    name,    shortName,    "slug": slug.current,  },  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),  "slug": slug.current,  "author": author->{name, 'slug': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},  excerpt,}
export type HeroArticleQueryResult = {
  _id: string
  title: string
  publishedAt: string
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    attribution: string
    _type: 'image'
    alt: string
    credit: string
    blurData: string | null
    dominantColor: string | null
  }
  division: {
    name: string
    slug: string
    longName: string
  } | null
  conferences: Array<{
    _id: string
    name: string
    shortName: string | null
    slug: string
  }> | null
  estimatedReadingTime: number
  slug: string
  author: {
    name: string
    slug: string
    archived: boolean | null
    image: {
      asset: {
        _id: string
        _type: 'sanity.imageAsset'
        metadata: SanityImageMetadata | null
        url: string | null
      } | null
    }
  } | null
  excerpt: string
} | null
// Variable: recentArticlesQuery
// Query: *[_type == "post" && featuredArticle != true] | order(publishedAt desc, _updatedAt desc)[1..2] {    _id,  title,  publishedAt,  mainImage{    ...,    "alt": coalesce(asset->altText, caption, "Image-Broken"),    "credit": coalesce(asset->creditLine, attribution, "Unknown"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },  division->{    name,    "slug": slug.current,    longName  },  conferences[]->{    _id,    name,    shortName,    "slug": slug.current,  },  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),  "slug": slug.current,  "author": author->{name, 'slug': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},  excerpt,}
export type RecentArticlesQueryResult = Array<{
  _id: string
  title: string
  publishedAt: string
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    attribution: string
    _type: 'image'
    alt: string
    credit: string
    blurData: string | null
    dominantColor: string | null
  }
  division: {
    name: string
    slug: string
    longName: string
  } | null
  conferences: Array<{
    _id: string
    name: string
    shortName: string | null
    slug: string
  }> | null
  estimatedReadingTime: number
  slug: string
  author: {
    name: string
    slug: string
    archived: boolean | null
    image: {
      asset: {
        _id: string
        _type: 'sanity.imageAsset'
        metadata: SanityImageMetadata | null
        url: string | null
      } | null
    }
  } | null
  excerpt: string
}>
// Variable: featuredArticlesQuery
// Query: *[_type == "post" && featuredArticle == true] | order(publishedAt desc, _updatedAt desc)[0..3] {    _id,  title,  publishedAt,  mainImage{    ...,    "alt": coalesce(asset->altText, caption, "Image-Broken"),    "credit": coalesce(asset->creditLine, attribution, "Unknown"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },  division->{    name,    "slug": slug.current,    longName  },  conferences[]->{    _id,    name,    shortName,    "slug": slug.current,  },  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),  "slug": slug.current,  "author": author->{name, 'slug': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},  excerpt,}
export type FeaturedArticlesQueryResult = Array<{
  _id: string
  title: string
  publishedAt: string
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    attribution: string
    _type: 'image'
    alt: string
    credit: string
    blurData: string | null
    dominantColor: string | null
  }
  division: {
    name: string
    slug: string
    longName: string
  } | null
  conferences: Array<{
    _id: string
    name: string
    shortName: string | null
    slug: string
  }> | null
  estimatedReadingTime: number
  slug: string
  author: {
    name: string
    slug: string
    archived: boolean | null
    image: {
      asset: {
        _id: string
        _type: 'sanity.imageAsset'
        metadata: SanityImageMetadata | null
        url: string | null
      } | null
    }
  } | null
  excerpt: string
}>
// Variable: otherArticlesQuery
// Query: *[_type == "post" && featuredArticle != true] | order(publishedAt desc, _updatedAt desc)[3..6] {    _id,  title,  publishedAt,  mainImage{    ...,    "alt": coalesce(asset->altText, caption, "Image-Broken"),    "credit": coalesce(asset->creditLine, attribution, "Unknown"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },  division->{    name,    "slug": slug.current,    longName  },  conferences[]->{    _id,    name,    shortName,    "slug": slug.current,  },  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),  "slug": slug.current,  "author": author->{name, 'slug': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},  excerpt,}
export type OtherArticlesQueryResult = Array<{
  _id: string
  title: string
  publishedAt: string
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    attribution: string
    _type: 'image'
    alt: string
    credit: string
    blurData: string | null
    dominantColor: string | null
  }
  division: {
    name: string
    slug: string
    longName: string
  } | null
  conferences: Array<{
    _id: string
    name: string
    shortName: string | null
    slug: string
  }> | null
  estimatedReadingTime: number
  slug: string
  author: {
    name: string
    slug: string
    archived: boolean | null
    image: {
      asset: {
        _id: string
        _type: 'sanity.imageAsset'
        metadata: SanityImageMetadata | null
        url: string | null
      } | null
    }
  } | null
  excerpt: string
}>
// Variable: conferencesAuthorHasWrittenFor
// Query: *[_id == $authorId][0] {  "conferences": array::unique(*[_id in *[_type == "post" && references($authorId)].conferences[]._ref])[] {    _id,    name,    shortName,    "division": division->.name  } | order(name asc)}
export type ConferencesAuthorHasWrittenForResult = {
  conferences: Array<
    | {
        _id: string
        name: null
        shortName: null
        division: null
      }
    | {
        _id: string
        name: string
        shortName: null
        division: null
      }
    | {
        _id: string
        name: string
        shortName: string | null
        division: null
      }
    | {
        _id: string
        name: Slug | null
        shortName: null
        division: null
      }
    | {
        _id: string
        name: string
        shortName: string | null
        division: string
      }
    | {
        _id: string
        name: null
        shortName: null
        division: string | null
      }
  >
} | null
// Variable: conferencePaths
// Query: *[_type == "conference" && defined(slug.current) && defined(division) && count(*[_type == 'post' && references(^._id)]) > 0]{  "slug": slug.current,  "divisionSlug": division->slug.current,}
export type ConferencePathsResult = Array<{
  slug: string
  divisionSlug: string
}>
// Variable: transferPortalPlayers
// Query: *[_type == 'transferPortal']{    ...,    "player": player->{      ...    },    "transferringFrom": transferringFrom->{      ...    },    "transferringTo": transferringTo->{      ...    },  }
export type TransferPortalPlayersResult = Array<never>
// Variable: openGraphDataBySlug
// Query: *[_type == "post" && slug.current == $slug][0]{  "title": title,  mainImage,  "author": author->{name, roles, image},  "publishedAt": publishedAt,}
export type OpenGraphDataBySlugResult = {
  title: string
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    attribution: string
    _type: 'image'
  }
  author: {
    name: string
    roles: Array<
      | 'Contributor'
      | 'Correspondent'
      | 'Editor'
      | 'Founder'
      | 'Guest Writer'
      | 'Historian'
      | 'Podcast Host'
      | 'Recruiting Analyst'
      | 'Senior Writer'
      | 'Transfer Portal Analyst'
    >
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
  } | null
  publishedAt: string
} | null
// Variable: schoolsByIdOrderedByRank
// Query: *[_type == "school" && _id in $ids[].id]{  _id,  "_order": $ids[id == ^._id][0].rank,  name,  shortName,  abbreviation,  image,} | order(_order)
export type SchoolsByIdOrderedByRankResult = Array<{
  _id: string
  _order: unknown | null
  name: string
  shortName: string | null
  abbreviation: string | null
  image: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    _type: 'image'
  }
}>
// Variable: schoolsByIdOrderedByPoints
// Query: *[_type == "school" && _id in $ids[].id]{  _id,  "_points": $ids[id == ^._id][0].totalPoints,  name,  shortName,  abbreviation,  image,} | order(_points desc)
export type SchoolsByIdOrderedByPointsResult = Array<{
  _id: string
  _points: unknown | null
  name: string
  shortName: string | null
  abbreviation: string | null
  image: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    _type: 'image'
  }
}>
// Variable: lastThreePosts
// Query: *[_type == "post"] | order(publishedAt desc)[0...3]{  _id,  title,  publishedAt,  "slug": slug.current,  "author": author->{name},  excerpt,}
export type LastThreePostsResult = Array<{
  _id: string
  title: string
  publishedAt: string
  slug: string
  author: {
    name: string
  } | null
  excerpt: string
}>
// Variable: schoolWithVoteOrder
// Query: *[_type == "school" && _id in $ids[].teamId]{  _id,  "_order": $ids[teamId == ^._id][0].rank,  name,  shortName,  abbreviation,  image,} | order(_order)
export type SchoolWithVoteOrderResult = Array<{
  _id: string
  _order: unknown | null
  name: string
  shortName: string | null
  abbreviation: string | null
  image: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    _type: 'image'
  }
}>

// Source: ../web/lib/sanity/query.ts
// Variable: querySettingsData
// Query: *[_type == "settings"][0]{    _id,    _type,    siteTitle,    siteDescription,    "logo": logo.asset->url + "?w=80&h=40&dpr=3&fit=max",    "socialLinks": socialLinks,    "contactEmail": contactEmail,  }
export type QuerySettingsDataResult = {
  _id: string
  _type: 'settings'
  siteTitle: string
  siteDescription: string
  logo: string | null
  socialLinks: {
    twitter?: string
    facebook?: string
    youtube?: string
  } | null
  contactEmail: string | null
} | null
// Variable: queryPostSlugData
// Query: *[_type == "post" && slug.current == $slug][0]{    ...,    "slug": slug.current,    sport->{      _id,      "slug": slug.current,      title    },      division->{    _id,    name,    "slug": slug.current,    logo{      ...,      "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),      "blurData": asset->metadata.lqip,      "dominantColor": asset->metadata.palette.dominant.background,    }  },      conferences[]->{    _id,    name,    shortName,    "slug": slug.current,    logo{      ...,      "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),      "blurData": asset->metadata.lqip,      "dominantColor": asset->metadata.palette.dominant.background,    },    division->{      "slug": slug.current,    },    sportSubdivisionAffiliations[]{        _key,        sport->{          _id, // Need this _id for client-side comparison        },        subgrouping->{          "slug": slug.current,          name,          shortName        }      }  },      authors[]->{    ...,    "slug": slug.current,      image{    ...,    "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  }  },      mainImage{    ...,    "alt": coalesce(asset->altText, caption, "Image-Broken"),    "credit": coalesce(asset->creditLine, attribution, "Unknown"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },      body[]{    ...,      markDefs[]{    ...,    _type == "internalLink" => {      ...,      "href": select(        reference->_type == "post" => "/" + reference->slug.current,        "#"      )    }  }  },    "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),    "wordCount": length(pt::text(body)),    // grab similar posts based on sport, and conferences and NOT division    "relatedPosts": *[      _type == "post"      && _id != ^._id      && (count(conferences[@._ref in ^.^.conferences[]._ref]) > 0 || count(tags[@._ref in ^.^.tags[]._ref]) > 0)    ] | order(publishedAt desc, _createdAt desc) {      _id,      title,      publishedAt,        mainImage{    ...,    "alt": coalesce(asset->altText, caption, "Image-Broken"),    "credit": coalesce(asset->creditLine, attribution, "Unknown"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },      "slug": slug.current,      authors[]->{        _id,        name,        roles,      }    }[0...3]  }
export type QueryPostSlugDataResult = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  slug: string
  author?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'author'
  }
  authors: Array<{
    _id: string
    _type: 'author'
    _createdAt: string
    _updatedAt: string
    _rev: string
    name: string
    slug: string
    archived?: boolean
    roles: Array<
      | 'Contributor'
      | 'Correspondent'
      | 'Editor'
      | 'Founder'
      | 'Guest Writer'
      | 'Historian'
      | 'Podcast Host'
      | 'Recruiting Analyst'
      | 'Senior Writer'
      | 'Transfer Portal Analyst'
    >
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
      alt: string | 'Image-Broken'
      blurData: string | null
      dominantColor: string | null
    }
    biography: string
    socialMedia: Array<
      {
        _key: string
      } & SocialMedia
    >
    socialLinks?: {
      twitter?: string
      facebook?: string
      youtube?: string
    }
  }>
  publishedAt: string
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    attribution: string
    _type: 'image'
    alt: string
    credit: string
    blurData: string | null
    dominantColor: string | null
  }
  sport: {
    _id: string
    slug: string
    title: string
  } | null
  division: {
    _id: string
    name: string
    slug: string
    logo: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt: string | 'Image-Broken'
      _type: 'image'
      blurData: string | null
      dominantColor: string | null
    } | null
  } | null
  sportSubgrouping?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'sportSubgrouping'
  }
  conferences: Array<{
    _id: string
    name: string
    shortName: string | null
    slug: string
    logo: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt: string | 'Image-Broken'
      _type: 'image'
      blurData: string | null
      dominantColor: string | null
    } | null
    division: {
      slug: string
    }
    sportSubdivisionAffiliations: Array<{
      _key: string
      sport: {
        _id: string
      }
      subgrouping: {
        slug: string | null
        name: string
        shortName: string | null
      }
    }> | null
  }> | null
  teams?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'school'
  }>
  tags?: Array<{
    _ref: string
    _type: 'reference'
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: 'tag'
  }>
  featuredArticle?: boolean
  excerpt: string
  body: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs: Array<
          | {
              reference?: {
                _ref: string
                _type: 'reference'
                _weak?: boolean
                [internalGroqTypeReferenceTo]?: 'post'
              }
              _type: 'internalLink'
              _key: string
              href: string | '#' | null
            }
          | {
              href?: string
              blank?: boolean
              _type: 'link'
              _key: string
            }
        > | null
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        caption: string
        attribution: string
        _type: 'image'
        _key: string
        markDefs: null
      }
    | {
        _key: string
        _type: 'table'
        rows?: Array<
          {
            _key: string
          } & TableRow
        >
        markDefs: null
      }
    | {
        _key: string
        _type: 'top25Table'
        votes?: Array<{
          voterName?: string
          voterAffiliation?: string
          teams?: Array<{
            _ref: string
            _type: 'reference'
            _weak?: boolean
            _key: string
            [internalGroqTypeReferenceTo]?: 'school'
          }>
          _key: string
        }>
        markDefs: null
      }
    | {
        _key: string
        _type: 'twitter'
        id?: string
        markDefs: null
      }
  >
  seoTitle?: string
  seoDescription?: string
  seoImage?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  ogTitle?: string
  ogDescription?: string
  estimatedReadingTime: number
  wordCount: number
  relatedPosts: Array<{
    _id: string
    title: string
    publishedAt: string
    mainImage: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      caption: string
      attribution: string
      _type: 'image'
      alt: string
      credit: string
      blurData: string | null
      dominantColor: string | null
    }
    slug: string
    authors: Array<{
      _id: string
      name: string
      roles: Array<
        | 'Contributor'
        | 'Correspondent'
        | 'Editor'
        | 'Founder'
        | 'Guest Writer'
        | 'Historian'
        | 'Podcast Host'
        | 'Recruiting Analyst'
        | 'Senior Writer'
        | 'Transfer Portal Analyst'
      >
    }>
  }>
} | null
// Variable: queryFooterData
// Query: *[_type == "footer" && _id == "footer"][0]{    _id,    subtitle,    columns[]{      _key,      title,      links[]{        _key,        name,        "openInNewTab": url.openInNewTab,        "href": select(          url.type == "internal" && url.internalType == "reference" => url.internal->slug.current,          url.type == "internal" && url.internalType == "custom" => url.internalUrl,          url.type == "external" => url.external,          url.href        )      }    },  }
export type QueryFooterDataResult = {
  _id: string
  subtitle: string | null
  columns: Array<{
    _key: string
    title: string | null
    links: Array<{
      _key: string
      name: string | null
      openInNewTab: boolean | null
      href: string | null
    }> | null
  }> | null
} | null
// Variable: queryGlobalSeoSettings
// Query: *[_type == "settings"][0]{    _id,    _type,    siteTitle,    logo{      ...,      ...asset->{        "alt": coalesce(altText, originalFilename, "no-alt"),        "blurData": metadata.lqip,        "dominantColor": metadata.palette.dominant.background      }    },    defaultOpenGraphImage{      ...,      ...asset->{        "alt": coalesce(altText, originalFilename, "no-alt"),        "blurData": metadata.lqip,        "dominantColor": metadata.palette.dominant.background      }    },    siteDescription,    socialLinks{      facebook,      twitter,      youtube    }  }
export type QueryGlobalSeoSettingsResult = {
  _id: string
  _type: 'settings'
  siteTitle: string
  logo:
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        alt: string | 'no-alt'
        blurData: string | null
        dominantColor: string | null
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
    | null
  defaultOpenGraphImage:
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        alt: string | 'no-alt'
        blurData: string | null
        dominantColor: string | null
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
      }
    | null
  siteDescription: string
  socialLinks: {
    facebook: string | null
    twitter: string | null
    youtube: string | null
  } | null
} | null
// Variable: queryNavbarData
// Query: *[_type == "navbar" && _id == "navbar"][0]{    _id,    columns[]{      _key,      _type == "navbarColumn" => {        "type": "column",        title,        links[]{          _key,          name,          icon,          description,          "openInNewTab": url.openInNewTab,          "href": select(            url.type == "internal" && url.internalType == "reference" => url.internal->slug.current,            url.type == "internal" && url.internalType == "custom" => url.internalUrl,            url.type == "external" => url.external,            url.href          )        }      },      _type == "navbarLink" => {        "type": "link",        name,        description,        "openInNewTab": url.openInNewTab,        "href": select(          url.type == "internal" && url.internalType == "reference" => url.internal->slug.current,          url.type == "internal" && url.internalType == "custom" => url.internalUrl,          url.type == "external" => url.external,          url.href        )      }    },    "logo": *[_type == "settings"][0].logo.asset->url + "?w=70&h=40&dpr=3&fit=max",    "siteTitle": *[_type == "settings"][0].siteTitle,  }
export type QueryNavbarDataResult = {
  _id: string
  columns: Array<
    | {
        _key: string
        type: 'link'
        name: string | null
        description: null
        openInNewTab: boolean | null
        href: string | null
      }
    | {
        _key: string
        type: 'column'
        title: string | null
        links: Array<{
          _key: string
          name: string | null
          icon: null
          description: string | null
          openInNewTab: boolean | null
          href: string | null
        }>
      }
  > | null
  logo: string | null
  siteTitle: string | null
} | null
// Variable: queryHomePageData
// Query: *[_type == "post" && featuredArticle != true] | order(publishedAt desc)[0...3]{    _id,    _type,    title,    excerpt,    "slug": slug.current,    mainImage{      ...,      "alt": coalesce(caption,asset->altText, asset->originalFilename, "Image-Broken"),      "blurData": asset->metadata.lqip,      "dominantColor": asset->metadata.palette.dominant.background,      "credit": coalesce(asset->creditLine, attribution, "Unknown"),    },    publishedAt,    division->{      name,      "slug": slug.current    },    conferences[]->{      name,      "slug": slug.current,      shortName    },    author->{      name,      "slug": slug.current,      image    },    authors[]->{      name,      "slug": slug.current,      image    }  }
export type QueryHomePageDataResult = Array<{
  _id: string
  _type: 'post'
  title: string
  excerpt: string
  slug: string
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    attribution: string
    _type: 'image'
    alt: string
    blurData: string | null
    dominantColor: string | null
    credit: string
  }
  publishedAt: string
  division: {
    name: string
    slug: string
  } | null
  conferences: Array<{
    name: string
    slug: string
    shortName: string | null
  }> | null
  author: {
    name: string
    slug: string
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
  } | null
  authors: Array<{
    name: string
    slug: string
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
  }>
}>
// Variable: queryLatestArticles
// Query: *[_type == "post" && featuredArticle != true] | order(publishedAt desc)[3..6]{    _id,    title,    excerpt,    "slug": slug.current,    publishedAt,    mainImage{      ...,      "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),      "blurData": asset->metadata.lqip,      "dominantColor": asset->metadata.palette.dominant.background,      "credit": coalesce(asset->creditLine, attribution, "Unknown"),    },    division->{      name,      "slug": slug.current    },    conferences[]->{      name,      "slug": slug.current,      shortName    },    author->{      name,      "slug": slug.current,      image    },    authors[]->{      name,      "slug": slug.current,      image    }  }
export type QueryLatestArticlesResult = Array<{
  _id: string
  title: string
  excerpt: string
  slug: string
  publishedAt: string
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    attribution: string
    _type: 'image'
    alt: string | 'Image-Broken'
    blurData: string | null
    dominantColor: string | null
    credit: string
  }
  division: {
    name: string
    slug: string
  } | null
  conferences: Array<{
    name: string
    slug: string
    shortName: string | null
  }> | null
  author: {
    name: string
    slug: string
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
  } | null
  authors: Array<{
    name: string
    slug: string
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
    }
  }>
}>
// Variable: queryLatestCollegeSportsArticles
// Query: *[_type == "post" && division->name == $division && sport->title match $sport && !(_id in $articleIds)] | order(publishedAt desc)[0..4]{    _id,    title,    excerpt,    "slug": slug.current,    mainImage{      ...,      "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),      "blurData": asset->metadata.lqip,      "dominantColor": asset->metadata.palette.dominant.background,      "credit": coalesce(asset->creditLine, attribution, "Unknown"),    },    publishedAt,    division->{      name,      "slug": slug.current    },    conferences[]->{      name,      "slug": slug.current,      shortName    },    authors[]->{      name,      "slug": slug.current,      image{        ...,        "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),        "blurData": asset->metadata.lqip,        "dominantColor": asset->metadata.palette.dominant.background,        "credit": coalesce(asset->creditLine, attribution, "Unknown"),      },    }  }
export type QueryLatestCollegeSportsArticlesResult = Array<{
  _id: string
  title: string
  excerpt: string
  slug: string
  mainImage: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    attribution: string
    _type: 'image'
    alt: string | 'Image-Broken'
    blurData: string | null
    dominantColor: string | null
    credit: string
  }
  publishedAt: string
  division: {
    name: string
    slug: string
  } | null
  conferences: Array<{
    name: string
    slug: string
    shortName: string | null
  }> | null
  authors: Array<{
    name: string
    slug: string
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      media?: unknown
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: 'image'
      alt: string | 'Image-Broken'
      blurData: string | null
      dominantColor: string | null
      credit: 'Unknown'
    }
  }>
}>
// Variable: querySitemapData
// Query: {  "posts": *[_type == "post" && defined(slug.current)] {    "slug": slug.current,    "lastModified": _updatedAt  },  "authors": *[_type == "author" && defined(slug.current) && archived == false] {    "slug": slug.current,    "lastModified": _updatedAt  },  "sports": *[_type == "sport" && defined(title) && count(*[_type == "post" && references(^._id)]) > 0] {    "slug": slug.current,    "lastModified": _updatedAt  },}
export type QuerySitemapDataResult = {
  posts: Array<{
    slug: string
    lastModified: string
  }>
  authors: Array<{
    slug: string
    lastModified: string
  }>
  sports: Array<{
    slug: string
    lastModified: string
  }>
}
// Variable: sportInfoBySlug
// Query: *[_type == "sport" && slug.current == $slug][0]{  _id,  title,}
export type SportInfoBySlugResult = {
  _id: string
  title: string
} | null
// Variable: authorBySlug
// Query: *[_type == "author" && slug.current == $slug && archived == false][0]{    ...,    "slug": slug.current,      image{    ...,    "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },  }
export type AuthorBySlugResult = {
  _id: string
  _type: 'author'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name: string
  slug: string
  archived?: boolean
  roles: Array<
    | 'Contributor'
    | 'Correspondent'
    | 'Editor'
    | 'Founder'
    | 'Guest Writer'
    | 'Historian'
    | 'Podcast Host'
    | 'Recruiting Analyst'
    | 'Senior Writer'
    | 'Transfer Portal Analyst'
  >
  image: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
    alt: string | 'Image-Broken'
    blurData: string | null
    dominantColor: string | null
  }
  biography: string
  socialMedia: Array<
    {
      _key: string
    } & SocialMedia
  >
  socialLinks?: {
    twitter?: string
    facebook?: string
    youtube?: string
  }
} | null
// Variable: authorsListNotArchived
// Query: *[_type == "author" && archived != true] | order(_createdAt asc, name asc) {    _id,    name,    roles,    "slug": slug.current,    image{      ...,      "alt": coalesce(asset->altText, ^.name, asset->originalFilename, "Image-Broken"),      "blurData": asset->metadata.lqip,      "dominantColor": asset->metadata.palette.dominant.background,    },    socialMedia[]{      _key,      name,      url    }  }
export type AuthorsListNotArchivedResult = Array<{
  _id: string
  name: string
  roles: Array<
    | 'Contributor'
    | 'Correspondent'
    | 'Editor'
    | 'Founder'
    | 'Guest Writer'
    | 'Historian'
    | 'Podcast Host'
    | 'Recruiting Analyst'
    | 'Senior Writer'
    | 'Transfer Portal Analyst'
  >
  slug: string
  image: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
    alt: string
    blurData: string | null
    dominantColor: string | null
  }
  socialMedia: Array<{
    _key: string
    name:
      | 'Apple Podcast'
      | 'Email'
      | 'Facebook'
      | 'Instagram'
      | 'Overcast Podcast'
      | 'Spotify Podcast'
      | 'Twitter'
      | 'Website'
    url: string | null
  }>
}>
// Variable: privacyPolicyQuery
// Query: *[_type == "legal" && slug.current == "privacy-policy"][0]
export type PrivacyPolicyQueryResult = {
  _id: string
  _type: 'legal'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  slug: Slug
  body: BlockContent
} | null
// Variable: schoolsByDivisionQuery
// Query: *[_type == "school" && division->slug.current == $division && top25VotingEligible != false]| order(shortName asc){  _id,  name,  shortName,  abbreviation,  image,  conference->{    name,    shortName  }}
export type SchoolsByDivisionQueryResult = Array<{
  _id: string
  name: string
  shortName: string | null
  abbreviation: string | null
  image: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    media?: unknown
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption: string
    _type: 'image'
  }
  conference: {
    name: string
    shortName: string | null
  }
}>

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '\n*[_type == "post" && featuredArticle != true] | order(publishedAt desc)[0...3] {\n  \n  _id,\n  title,\n  publishedAt,\n  mainImage{\n    ...,\n    "alt": coalesce(asset->altText, caption, "Image-Broken"),\n    "credit": coalesce(asset->creditLine, attribution, "Unknown"),\n    "blurData": asset->metadata.lqip,\n    "dominantColor": asset->metadata.palette.dominant.background,\n  },\n  division->{\n    name,\n    "slug": slug.current,\n    longName\n  },\n  conferences[]->{\n    _id,\n    name,\n    shortName,\n    "slug": slug.current,\n  },\n  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),\n  "slug": slug.current,\n  "author": author->{name, \'slug\': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},\n  excerpt,\n\n}\n': HeroPostsQueryResult
    '\n*[_type == "post" && featuredArticle != true] | order(publishedAt desc, _updatedAt desc)[3..6] {\n  \n  _id,\n  title,\n  publishedAt,\n  mainImage{\n    ...,\n    "alt": coalesce(asset->altText, caption, "Image-Broken"),\n    "credit": coalesce(asset->creditLine, attribution, "Unknown"),\n    "blurData": asset->metadata.lqip,\n    "dominantColor": asset->metadata.palette.dominant.background,\n  },\n  division->{\n    name,\n    "slug": slug.current,\n    longName\n  },\n  conferences[]->{\n    _id,\n    name,\n    shortName,\n    "slug": slug.current,\n  },\n  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),\n  "slug": slug.current,\n  "author": author->{name, \'slug\': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},\n  excerpt,\n\n}\n':
      | LatestArticlesForHomePageQueryResult
      | OtherArticlesQueryResult
    '\n*[_type == "post" && slug.current == $slug][0]{\n  \n  _id,\n  _updatedAt,\n  title,\n  publishedAt,\n  "mainImage": {\n    "caption": mainImage.caption,\n    "attribution": mainImage.attribution,\n    "crop": mainImage.crop,\n    "hotspot": mainImage.hotspot,\n    "asset": mainImage.asset->,\n  },\n  division->{\n    name,\n    "slug": slug.current,\n  },\n  conferences[]->{\n    name,\n    shortName,\n    "slug": slug.current,\n  },\n  "slug": slug.current,\n  "author": author->{\n    name,\n    \'slug\': slug.current,\n    biography,\n    roles,\n    socialMedia,\n    image,\n    archived,\n    \'collegeOrUniversity\': collegeOrUniversity->name\n  },\n  authors[]->{\n    name,\n    \'slug\': slug.current,\n    biography,\n    roles,\n    socialMedia,\n    image,\n    archived,\n    \'collegeOrUniversity\': collegeOrUniversity->name\n  },\n  excerpt,\n  teams[]->{\n    _id,\n    name,\n    shortName,\n    nickname\n  },\n  body[]{\n    ...,\n    markDefs[]{\n      ...,\n      _type == "internalLink" => {\n        reference->{\n          _type,\n          "slug": slug.current,\n          "divisionSlug": division->slug.current,\n        }\n      },\n    },\n    _type == "image" => {\n      ...,\n      asset->\n    },\n    _type == \'top25Table\' => {\n      ...,\n      votes[]{\n        ...,\n        teams[]->{\n          _id,\n          name,\n          abbreviation,\n          image\n        }\n      }\n    }\n  },\n  featuredArticle,\n  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),\n  "wordCount": length(pt::text(body))\n,\n  "relatedArticles": *[\n    _type == "post"\n    && _id != ^._id\n    && (count(conferences[@._ref in ^.^.conferences[]._ref]) > 0 || count(tags[@._ref in ^.^.tags[]._ref]) > 0)\n  ] | order(publishedAt desc, _createdAt desc) {\n      _id,\n      title,\n      publishedAt,\n      "mainImage": {\n        "caption": mainImage.caption,\n        "attribution": mainImage.attribution,\n        "crop": mainImage.crop,\n        "hotspot": mainImage.hotspot,\n        "asset": mainImage.asset->,\n      },\n      division->{\n        name,\n        "slug": slug.current,\n      },\n      conferences[]->{\n        shortName,\n        name,\n        "slug": slug.current,\n      },\n      "slug": slug.current,\n      "author": author->{name},\n  }[0...3]\n}\n': PostsBySlugQueryResult
    '\n*[_type == "post" && division->name == $division && !(_id in $ids)] | order(publishedAt desc, _updatedAt desc)[0...5] {\n  _id,\n  title,\n  "slug": slug.current,\n  publishedAt,\n  "mainImage": {\n    "caption": mainImage.caption,\n    "attribution": mainImage.attribution,\n    "crop": mainImage.crop,\n    "hotspot": mainImage.hotspot,\n    "asset": mainImage.asset->,\n  },\n  division->{\n    name,\n    "slug": slug.current,\n  },\n  conferences[]->{\n    name,\n    shortName,\n    "slug": slug.current,\n  },\n  "author": author->{name, image, \'slug\': slug.current},\n}\n': LatestDivisionArticlesQueryResult
    '\n*[_type == "post" && featuredArticle != true] | order(publishedAt desc) [0] {\n  \n  _id,\n  title,\n  publishedAt,\n  mainImage{\n    ...,\n    "alt": coalesce(asset->altText, caption, "Image-Broken"),\n    "credit": coalesce(asset->creditLine, attribution, "Unknown"),\n    "blurData": asset->metadata.lqip,\n    "dominantColor": asset->metadata.palette.dominant.background,\n  },\n  division->{\n    name,\n    "slug": slug.current,\n    longName\n  },\n  conferences[]->{\n    _id,\n    name,\n    shortName,\n    "slug": slug.current,\n  },\n  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),\n  "slug": slug.current,\n  "author": author->{name, \'slug\': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},\n  excerpt,\n\n}': HeroArticleQueryResult
    '\n*[_type == "post" && featuredArticle != true] | order(publishedAt desc, _updatedAt desc)[1..2] {\n  \n  _id,\n  title,\n  publishedAt,\n  mainImage{\n    ...,\n    "alt": coalesce(asset->altText, caption, "Image-Broken"),\n    "credit": coalesce(asset->creditLine, attribution, "Unknown"),\n    "blurData": asset->metadata.lqip,\n    "dominantColor": asset->metadata.palette.dominant.background,\n  },\n  division->{\n    name,\n    "slug": slug.current,\n    longName\n  },\n  conferences[]->{\n    _id,\n    name,\n    shortName,\n    "slug": slug.current,\n  },\n  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),\n  "slug": slug.current,\n  "author": author->{name, \'slug\': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},\n  excerpt,\n\n}\n': RecentArticlesQueryResult
    '\n*[_type == "post" && featuredArticle == true] | order(publishedAt desc, _updatedAt desc)[0..3] {\n  \n  _id,\n  title,\n  publishedAt,\n  mainImage{\n    ...,\n    "alt": coalesce(asset->altText, caption, "Image-Broken"),\n    "credit": coalesce(asset->creditLine, attribution, "Unknown"),\n    "blurData": asset->metadata.lqip,\n    "dominantColor": asset->metadata.palette.dominant.background,\n  },\n  division->{\n    name,\n    "slug": slug.current,\n    longName\n  },\n  conferences[]->{\n    _id,\n    name,\n    shortName,\n    "slug": slug.current,\n  },\n  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),\n  "slug": slug.current,\n  "author": author->{name, \'slug\': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},\n  excerpt,\n\n}\n': FeaturedArticlesQueryResult
    '\n*[_id == $authorId][0] {\n  "conferences": array::unique(*[_id in *[_type == "post" && references($authorId)].conferences[]._ref])[] {\n    _id,\n    name,\n    shortName,\n    "division": division->.name\n  } | order(name asc)\n}\n': ConferencesAuthorHasWrittenForResult
    '\n*[_type == "conference" && defined(slug.current) && defined(division) && count(*[_type == \'post\' && references(^._id)]) > 0]{\n  "slug": slug.current,\n  "divisionSlug": division->slug.current,\n}\n': ConferencePathsResult
    '\n  *[_type == \'transferPortal\']{\n    ...,\n    "player": player->{\n      ...\n    },\n    "transferringFrom": transferringFrom->{\n      ...\n    },\n    "transferringTo": transferringTo->{\n      ...\n    },\n  }\n': TransferPortalPlayersResult
    '\n*[_type == "post" && slug.current == $slug][0]{\n  "title": title,\n  mainImage,\n  "author": author->{name, roles, image},\n  "publishedAt": publishedAt,\n}\n': OpenGraphDataBySlugResult
    '\n*[_type == "school" && _id in $ids[].id]{\n  _id,\n  "_order": $ids[id == ^._id][0].rank,\n  name,\n  shortName,\n  abbreviation,\n  image,\n} | order(_order)\n': SchoolsByIdOrderedByRankResult
    '\n*[_type == "school" && _id in $ids[].id]{\n  _id,\n  "_points": $ids[id == ^._id][0].totalPoints,\n  name,\n  shortName,\n  abbreviation,\n  image,\n} | order(_points desc)\n': SchoolsByIdOrderedByPointsResult
    '\n*[_type == "post"] | order(publishedAt desc)[0...3]{\n  _id,\n  title,\n  publishedAt,\n  "slug": slug.current,\n  "author": author->{name},\n  excerpt,\n}\n': LastThreePostsResult
    '\n*[_type == "school" && _id in $ids[].teamId]{\n  _id,\n  "_order": $ids[teamId == ^._id][0].rank,\n  name,\n  shortName,\n  abbreviation,\n  image,\n} | order(_order)\n': SchoolWithVoteOrderResult
    '\n  *[_type == "settings"][0]{\n    _id,\n    _type,\n    siteTitle,\n    siteDescription,\n    "logo": logo.asset->url + "?w=80&h=40&dpr=3&fit=max",\n    "socialLinks": socialLinks,\n    "contactEmail": contactEmail,\n  }\n': QuerySettingsDataResult
    '\n  *[_type == "post" && slug.current == $slug][0]{\n    ...,\n    "slug": slug.current,\n    sport->{\n      _id,\n      "slug": slug.current,\n      title\n    },\n    \n  division->{\n    _id,\n    name,\n    "slug": slug.current,\n    logo{\n      ...,\n      "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),\n      "blurData": asset->metadata.lqip,\n      "dominantColor": asset->metadata.palette.dominant.background,\n    }\n  }\n,\n    \n  conferences[]->{\n    _id,\n    name,\n    shortName,\n    "slug": slug.current,\n    logo{\n      ...,\n      "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),\n      "blurData": asset->metadata.lqip,\n      "dominantColor": asset->metadata.palette.dominant.background,\n    },\n    division->{\n      "slug": slug.current,\n    },\n    sportSubdivisionAffiliations[]{\n        _key,\n        sport->{\n          _id, // Need this _id for client-side comparison\n        },\n        subgrouping->{\n          "slug": slug.current,\n          name,\n          shortName\n        }\n      }\n  }\n,\n    \n  authors[]->{\n    ...,\n    "slug": slug.current,\n    \n  image{\n    ...,\n    "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),\n    "blurData": asset->metadata.lqip,\n    "dominantColor": asset->metadata.palette.dominant.background,\n  }\n\n  }\n,\n    \n  mainImage{\n    ...,\n    "alt": coalesce(asset->altText, caption, "Image-Broken"),\n    "credit": coalesce(asset->creditLine, attribution, "Unknown"),\n    "blurData": asset->metadata.lqip,\n    "dominantColor": asset->metadata.palette.dominant.background,\n  }\n,\n    \n  body[]{\n    ...,\n    \n  markDefs[]{\n    ...,\n    _type == "internalLink" => {\n      ...,\n      "href": select(\n        reference->_type == "post" => "/" + reference->slug.current,\n        "#"\n      )\n    }\n  }\n\n  }\n,\n    "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),\n    "wordCount": length(pt::text(body)),\n    // grab similar posts based on sport, and conferences and NOT division\n    "relatedPosts": *[\n      _type == "post"\n      && _id != ^._id\n      && (count(conferences[@._ref in ^.^.conferences[]._ref]) > 0 || count(tags[@._ref in ^.^.tags[]._ref]) > 0)\n    ] | order(publishedAt desc, _createdAt desc) {\n      _id,\n      title,\n      publishedAt,\n      \n  mainImage{\n    ...,\n    "alt": coalesce(asset->altText, caption, "Image-Broken"),\n    "credit": coalesce(asset->creditLine, attribution, "Unknown"),\n    "blurData": asset->metadata.lqip,\n    "dominantColor": asset->metadata.palette.dominant.background,\n  }\n,\n      "slug": slug.current,\n      authors[]->{\n        _id,\n        name,\n        roles,\n      }\n    }[0...3]\n  }\n': QueryPostSlugDataResult
    '\n  *[_type == "footer" && _id == "footer"][0]{\n    _id,\n    subtitle,\n    columns[]{\n      _key,\n      title,\n      links[]{\n        _key,\n        name,\n        "openInNewTab": url.openInNewTab,\n        "href": select(\n          url.type == "internal" && url.internalType == "reference" => url.internal->slug.current,\n          url.type == "internal" && url.internalType == "custom" => url.internalUrl,\n          url.type == "external" => url.external,\n          url.href\n        )\n      }\n    },\n  }\n': QueryFooterDataResult
    '\n  *[_type == "settings"][0]{\n    _id,\n    _type,\n    siteTitle,\n    logo{\n      ...,\n      ...asset->{\n        "alt": coalesce(altText, originalFilename, "no-alt"),\n        "blurData": metadata.lqip,\n        "dominantColor": metadata.palette.dominant.background\n      }\n    },\n    defaultOpenGraphImage{\n      ...,\n      ...asset->{\n        "alt": coalesce(altText, originalFilename, "no-alt"),\n        "blurData": metadata.lqip,\n        "dominantColor": metadata.palette.dominant.background\n      }\n    },\n    siteDescription,\n    socialLinks{\n      facebook,\n      twitter,\n      youtube\n    }\n  }\n': QueryGlobalSeoSettingsResult
    '\n  *[_type == "navbar" && _id == "navbar"][0]{\n    _id,\n    columns[]{\n      _key,\n      _type == "navbarColumn" => {\n        "type": "column",\n        title,\n        links[]{\n          _key,\n          name,\n          icon,\n          description,\n          "openInNewTab": url.openInNewTab,\n          "href": select(\n            url.type == "internal" && url.internalType == "reference" => url.internal->slug.current,\n            url.type == "internal" && url.internalType == "custom" => url.internalUrl,\n            url.type == "external" => url.external,\n            url.href\n          )\n        }\n      },\n      _type == "navbarLink" => {\n        "type": "link",\n        name,\n        description,\n        "openInNewTab": url.openInNewTab,\n        "href": select(\n          url.type == "internal" && url.internalType == "reference" => url.internal->slug.current,\n          url.type == "internal" && url.internalType == "custom" => url.internalUrl,\n          url.type == "external" => url.external,\n          url.href\n        )\n      }\n    },\n    "logo": *[_type == "settings"][0].logo.asset->url + "?w=70&h=40&dpr=3&fit=max",\n    "siteTitle": *[_type == "settings"][0].siteTitle,\n  }\n': QueryNavbarDataResult
    '\n  *[_type == "post" && featuredArticle != true] | order(publishedAt desc)[0...3]{\n    _id,\n    _type,\n    title,\n    excerpt,\n    "slug": slug.current,\n    mainImage{\n      ...,\n      "alt": coalesce(caption,asset->altText, asset->originalFilename, "Image-Broken"),\n      "blurData": asset->metadata.lqip,\n      "dominantColor": asset->metadata.palette.dominant.background,\n      "credit": coalesce(asset->creditLine, attribution, "Unknown"),\n    },\n    publishedAt,\n    division->{\n      name,\n      "slug": slug.current\n    },\n    conferences[]->{\n      name,\n      "slug": slug.current,\n      shortName\n    },\n    author->{\n      name,\n      "slug": slug.current,\n      image\n    },\n    authors[]->{\n      name,\n      "slug": slug.current,\n      image\n    }\n  }\n': QueryHomePageDataResult
    '\n *[_type == "post" && featuredArticle != true] | order(publishedAt desc)[3..6]{\n    _id,\n    title,\n    excerpt,\n    "slug": slug.current,\n    publishedAt,\n    mainImage{\n      ...,\n      "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),\n      "blurData": asset->metadata.lqip,\n      "dominantColor": asset->metadata.palette.dominant.background,\n      "credit": coalesce(asset->creditLine, attribution, "Unknown"),\n    },\n    division->{\n      name,\n      "slug": slug.current\n    },\n    conferences[]->{\n      name,\n      "slug": slug.current,\n      shortName\n    },\n    author->{\n      name,\n      "slug": slug.current,\n      image\n    },\n    authors[]->{\n      name,\n      "slug": slug.current,\n      image\n    }\n  }\n': QueryLatestArticlesResult
    '\n  *[_type == "post" && division->name == $division && sport->title match $sport && !(_id in $articleIds)] | order(publishedAt desc)[0..4]{\n    _id,\n    title,\n    excerpt,\n    "slug": slug.current,\n    mainImage{\n      ...,\n      "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),\n      "blurData": asset->metadata.lqip,\n      "dominantColor": asset->metadata.palette.dominant.background,\n      "credit": coalesce(asset->creditLine, attribution, "Unknown"),\n    },\n    publishedAt,\n    division->{\n      name,\n      "slug": slug.current\n    },\n    conferences[]->{\n      name,\n      "slug": slug.current,\n      shortName\n    },\n    authors[]->{\n      name,\n      "slug": slug.current,\n      image{\n        ...,\n        "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),\n        "blurData": asset->metadata.lqip,\n        "dominantColor": asset->metadata.palette.dominant.background,\n        "credit": coalesce(asset->creditLine, attribution, "Unknown"),\n      },\n    }\n  }\n': QueryLatestCollegeSportsArticlesResult
    '{\n  "posts": *[_type == "post" && defined(slug.current)] {\n    "slug": slug.current,\n    "lastModified": _updatedAt\n  },\n  "authors": *[_type == "author" && defined(slug.current) && archived == false] {\n    "slug": slug.current,\n    "lastModified": _updatedAt\n  },\n  "sports": *[_type == "sport" && defined(title) && count(*[_type == "post" && references(^._id)]) > 0] {\n    "slug": slug.current,\n    "lastModified": _updatedAt\n  },\n}': QuerySitemapDataResult
    '\n*[_type == "sport" && slug.current == $slug][0]{\n  _id,\n  title,\n}': SportInfoBySlugResult
    '\n  *[_type == "author" && slug.current == $slug && archived == false][0]{\n    ...,\n    "slug": slug.current,\n    \n  image{\n    ...,\n    "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),\n    "blurData": asset->metadata.lqip,\n    "dominantColor": asset->metadata.palette.dominant.background,\n  }\n,\n  }\n': AuthorBySlugResult
    '\n  *[_type == "author" && archived != true] | order(_createdAt asc, name asc) {\n    _id,\n    name,\n    roles,\n    "slug": slug.current,\n    image{\n      ...,\n      "alt": coalesce(asset->altText, ^.name, asset->originalFilename, "Image-Broken"),\n      "blurData": asset->metadata.lqip,\n      "dominantColor": asset->metadata.palette.dominant.background,\n    },\n    socialMedia[]{\n      _key,\n      name,\n      url\n    }\n  }\n': AuthorsListNotArchivedResult
    '\n  *[_type == "legal" && slug.current == "privacy-policy"][0]\n': PrivacyPolicyQueryResult
    '\n  *[_type == "school" && division->slug.current == $division && top25VotingEligible != false]| order(shortName asc){\n  _id,\n  name,\n  shortName,\n  abbreviation,\n  image,\n  conference->{\n    name,\n    shortName\n  }\n}\n': SchoolsByDivisionQueryResult
  }
}
