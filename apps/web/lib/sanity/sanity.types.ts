/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Twitter = {
  _type: "twitter";
  id?: string;
};

export type Top25Table = {
  _type: "top25Table";
  votes?: Array<{
    voterName?: string;
    voterAffiliation?: string;
    teams?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "school";
    }>;
    _key: string;
  }>;
};

export type SocialMedia = {
  _type: "socialMedia";
  name?: "Email" | "Twitter" | "Facebook" | "Instagram" | "Website" | "Spotify Podcast" | "Apple Podcast" | "Overcast Podcast";
  url?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    blank?: boolean;
    _type: "link";
    _key: string;
  } | {
    reference?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "division";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "conference";
    };
    _type: "internalLink";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  caption?: string;
  attribution?: string;
  _type: "image";
  _key: string;
} | {
  _key: string;
} & Twitter | {
  _key: string;
} & Top25Table | {
  _key: string;
} & Table>;

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  label?: string;
  siteTitle?: string;
  siteDescription?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  contactEmail?: string;
  socialLinks?: {
    twitter?: string;
    facebook?: string;
    youtube?: string;
  };
};

export type Navbar = {
  _id: string;
  _type: "navbar";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  label?: string;
  columns?: Array<{
    title?: string;
    links?: Array<{
      name?: string;
      description?: string;
      url?: CustomUrl;
      _type: "navbarColumnLink";
      _key: string;
    }>;
    _type: "navbarColumn";
    _key: string;
  } | {
    name?: string;
    url?: CustomUrl;
    _type: "navbarLink";
    _key: string;
  }>;
};

export type Footer = {
  _id: string;
  _type: "footer";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  label?: string;
  subtitle?: string;
  columns?: Array<{
    title?: string;
    links?: Array<{
      name?: string;
      url?: CustomUrl;
      _type: "footerColumnLink";
      _key: string;
    }>;
    _type: "footerColumn";
    _key: string;
  }>;
};

export type CustomUrl = {
  _type: "customUrl";
  type?: "internal" | "external";
  openInNewTab?: boolean;
  external?: string;
  href?: string;
  internalType?: "reference" | "custom";
  internal?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "division";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "conference";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "legal";
  };
  internalUrl?: string;
};

export type Tag = {
  _id: string;
  _type: "tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
};

export type School = {
  _id: string;
  _type: "school";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  shortName?: string;
  abbreviation?: string;
  nickname?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    _type: "image";
  };
  top25VotingEligible?: boolean;
  division?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "division";
  };
  conference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "conference";
  };
};

export type Redirect = {
  _id: string;
  _type: "redirect";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  source?: string;
  destination?: string;
  permanent?: boolean;
};

export type Legal = {
  _id: string;
  _type: "legal";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  body?: BlockContent;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  authors?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  publishedAt?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    attribution?: string;
    _type: "image";
  };
  sport?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sport";
  };
  division?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "division";
  };
  conferences?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "conference";
  }>;
  teams?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "school";
  }>;
  tags?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tag";
  }>;
  featuredArticle?: boolean;
  excerpt?: string;
  body?: BlockContent;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  seoNoIndex?: boolean;
  seoHideFromLists?: boolean;
  ogTitle?: string;
  ogDescription?: string;
};

export type Sport = {
  _id: string;
  _type: "sport";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  seoNoIndex?: boolean;
  seoHideFromLists?: boolean;
  ogTitle?: string;
  ogDescription?: string;
};

export type Conference = {
  _id: string;
  _type: "conference";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  shortName?: string;
  slug?: Slug;
  description?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  division?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "division";
  };
};

export type Division = {
  _id: string;
  _type: "division";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  heading?: string;
  longName?: string;
  slug?: Slug;
  description?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  conferences?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "conference";
  }>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  archived?: boolean;
  roles?: Array<"Contributor" | "Correspondent" | "Editor" | "Founder" | "Guest Writer" | "Historian" | "Podcast Host" | "Recruiting Analyst" | "Senior Writer" | "Transfer Portal Analyst">;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  biography?: string;
  socialMedia?: Array<{
    _key: string;
  } & SocialMedia>;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Table = {
  _type: "table";
  rows?: Array<{
    _key: string;
  } & TableRow>;
};

export type TableRow = {
  _type: "tableRow";
  cells?: Array<string>;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<{
    _key: string;
  } & SanityAssistInstructionTask>;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<{
    _key: string;
  } & SanityAssistSchemaTypeField>;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  } | {
    _key: string;
  } & SanityAssistInstructionFieldRef | {
    _key: string;
  } & SanityAssistInstructionContext | {
    _key: string;
  } & SanityAssistInstructionUserInput>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<{
    _key: string;
  } & SanityAssistOutputField | {
    _key: string;
  } & SanityAssistOutputType>;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<{
    _key: string;
  } & SanityAssistInstruction>;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Twitter | Top25Table | SocialMedia | BlockContent | Settings | Navbar | Footer | CustomUrl | Tag | School | Redirect | Legal | Post | Sport | Conference | Division | Author | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Table | TableRow | MediaTag | Slug | SanityAssistInstructionTask | SanityAssistTaskStatus | SanityAssistSchemaTypeAnnotations | SanityAssistOutputType | SanityAssistOutputField | SanityAssistInstructionContext | AssistInstructionContext | SanityAssistInstructionUserInput | SanityAssistInstructionPrompt | SanityAssistInstructionFieldRef | SanityAssistInstruction | SanityAssistSchemaTypeField;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../web/lib/sanity.queries.ts
// Variable: allAuthors
// Query: *[_type == 'author' && archived != true] | order(_createdAt asc, name asc){    _id,  _updatedAt,  name,  'slug': slug.current,  roles,  image,  biography,  socialMedia}
export type AllAuthorsResult = Array<{
  _id: string;
  _updatedAt: string;
  name: string | null;
  slug: string | null;
  roles: Array<"Contributor" | "Correspondent" | "Editor" | "Founder" | "Guest Writer" | "Historian" | "Podcast Host" | "Recruiting Analyst" | "Senior Writer" | "Transfer Portal Analyst"> | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  biography: string | null;
  socialMedia: Array<{
    _key: string;
  } & SocialMedia> | null;
}>;
// Variable: privacyPolicy
// Query: *[_type == "legal" && slug.current == "privacy-policy"][0] {    _id,  _updatedAt,  title,  slug,  body}
export type PrivacyPolicyResult = {
  _id: string;
  _updatedAt: string;
  title: string | null;
  slug: Slug | null;
  body: BlockContent | null;
} | null;
// Variable: heroPostsQuery
// Query: *[_type == "post" && featuredArticle != true] | order(publishedAt desc)[0...3] {    _id,  title,  publishedAt,  "mainImage": {    "caption": mainImage.caption,    "attribution": mainImage.attribution,    "crop": mainImage.crop,    "hotspot": mainImage.hotspot,    "asset": mainImage.asset->,  },  division->{    name,    "slug": slug.current,    longName  },  conferences[]->{    _id,    name,    shortName,    "slug": slug.current,  },  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),  "slug": slug.current,  "author": author->{name, 'slug': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},  excerpt,}
export type HeroPostsQueryResult = Array<{
  _id: string;
  title: string | null;
  publishedAt: string | null;
  mainImage: {
    caption: string | null;
    attribution: string | null;
    crop: SanityImageCrop | null;
    hotspot: SanityImageHotspot | null;
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  };
  division: {
    name: string | null;
    slug: string | null;
    longName: string | null;
  } | null;
  conferences: Array<{
    _id: string;
    name: string | null;
    shortName: string | null;
    slug: string | null;
  }> | null;
  estimatedReadingTime: number;
  slug: string | null;
  author: {
    name: string | null;
    slug: string | null;
    archived: boolean | null;
    image: {
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        metadata: SanityImageMetadata | null;
        url: string | null;
      } | null;
    };
  } | null;
  excerpt: string | null;
}>;
// Variable: latestArticlesForHomePageQuery
// Query: *[_type == "post" && featuredArticle != true] | order(publishedAt desc, _updatedAt desc)[3..6] {    _id,  title,  publishedAt,  "mainImage": {    "caption": mainImage.caption,    "attribution": mainImage.attribution,    "crop": mainImage.crop,    "hotspot": mainImage.hotspot,    "asset": mainImage.asset->,  },  division->{    name,    "slug": slug.current,    longName  },  conferences[]->{    _id,    name,    shortName,    "slug": slug.current,  },  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),  "slug": slug.current,  "author": author->{name, 'slug': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},  excerpt,}
export type LatestArticlesForHomePageQueryResult = Array<{
  _id: string;
  title: string | null;
  publishedAt: string | null;
  mainImage: {
    caption: string | null;
    attribution: string | null;
    crop: SanityImageCrop | null;
    hotspot: SanityImageHotspot | null;
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  };
  division: {
    name: string | null;
    slug: string | null;
    longName: string | null;
  } | null;
  conferences: Array<{
    _id: string;
    name: string | null;
    shortName: string | null;
    slug: string | null;
  }> | null;
  estimatedReadingTime: number;
  slug: string | null;
  author: {
    name: string | null;
    slug: string | null;
    archived: boolean | null;
    image: {
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        metadata: SanityImageMetadata | null;
        url: string | null;
      } | null;
    };
  } | null;
  excerpt: string | null;
}>;
// Variable: postsBySlugQuery
// Query: *[_type == "post" && slug.current == $slug][0]{    _id,  _updatedAt,  title,  publishedAt,  "mainImage": {    "caption": mainImage.caption,    "attribution": mainImage.attribution,    "crop": mainImage.crop,    "hotspot": mainImage.hotspot,    "asset": mainImage.asset->,  },  division->{    name,    "slug": slug.current,  },  conferences[]->{    name,    shortName,    "slug": slug.current,  },  "slug": slug.current,  "author": author->{    name,    'slug': slug.current,    biography,    roles,    socialMedia,    image,    archived,    'collegeOrUniversity': collegeOrUniversity->name  },  authors[]->{    name,    'slug': slug.current,    biography,    roles,    socialMedia,    image,    archived,    'collegeOrUniversity': collegeOrUniversity->name  },  excerpt,  teams[]->{    _id,    name,    shortName,    nickname  },  body[]{    ...,    markDefs[]{      ...,      _type == "internalLink" => {        reference->{          _type,          "slug": slug.current,          "divisionSlug": division->slug.current,        }      },    },    _type == "image" => {      ...,      asset->    },    _type == 'top25Table' => {      ...,      votes[]{        ...,        teams[]->{          _id,          name,          abbreviation,          image        }      }    }  },  featuredArticle,  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),  "wordCount": length(pt::text(body)),  "relatedArticles": *[    _type == "post"    && _id != ^._id    && (count(conferences[@._ref in ^.^.conferences[]._ref]) > 0 || count(tags[@._ref in ^.^.tags[]._ref]) > 0)  ] | order(publishedAt desc, _createdAt desc) {      _id,      title,      publishedAt,      "mainImage": {        "caption": mainImage.caption,        "attribution": mainImage.attribution,        "crop": mainImage.crop,        "hotspot": mainImage.hotspot,        "asset": mainImage.asset->,      },      division->{        name,        "slug": slug.current,      },      conferences[]->{        shortName,        name,        "slug": slug.current,      },      "slug": slug.current,      "author": author->{name},  }[0...3]}
export type PostsBySlugQueryResult = {
  _id: string;
  _updatedAt: string;
  title: string | null;
  publishedAt: string | null;
  mainImage: {
    caption: string | null;
    attribution: string | null;
    crop: SanityImageCrop | null;
    hotspot: SanityImageHotspot | null;
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  };
  division: {
    name: string | null;
    slug: string | null;
  } | null;
  conferences: Array<{
    name: string | null;
    shortName: string | null;
    slug: string | null;
  }> | null;
  slug: string | null;
  author: {
    name: string | null;
    slug: string | null;
    biography: string | null;
    roles: Array<"Contributor" | "Correspondent" | "Editor" | "Founder" | "Guest Writer" | "Historian" | "Podcast Host" | "Recruiting Analyst" | "Senior Writer" | "Transfer Portal Analyst"> | null;
    socialMedia: Array<{
      _key: string;
    } & SocialMedia> | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    archived: boolean | null;
    collegeOrUniversity: null;
  } | null;
  authors: Array<{
    name: string | null;
    slug: string | null;
    biography: string | null;
    roles: Array<"Contributor" | "Correspondent" | "Editor" | "Founder" | "Guest Writer" | "Historian" | "Podcast Host" | "Recruiting Analyst" | "Senior Writer" | "Transfer Portal Analyst"> | null;
    socialMedia: Array<{
      _key: string;
    } & SocialMedia> | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    archived: boolean | null;
    collegeOrUniversity: null;
  }> | null;
  excerpt: string | null;
  teams: Array<{
    _id: string;
    name: string | null;
    shortName: string | null;
    nickname: string | null;
  }> | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      reference: {
        _type: "conference";
        slug: string | null;
        divisionSlug: string | null;
      } | {
        _type: "division";
        slug: string | null;
        divisionSlug: null;
      } | {
        _type: "post";
        slug: string | null;
        divisionSlug: string | null;
      } | null;
      _type: "internalLink";
      _key: string;
    } | {
      href?: string;
      blank?: boolean;
      _type: "link";
      _key: string;
    }> | null;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    attribution?: string;
    _type: "image";
    _key: string;
    markDefs: null;
  } | {
    _key: string;
    _type: "table";
    rows?: Array<{
      _key: string;
    } & TableRow>;
    markDefs: null;
  } | {
    _key: string;
    _type: "top25Table";
    votes: Array<{
      voterName?: string;
      voterAffiliation?: string;
      teams: Array<{
        _id: string;
        name: string | null;
        abbreviation: string | null;
        image: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          caption?: string;
          _type: "image";
        } | null;
      }> | null;
      _key: string;
    }> | null;
    markDefs: null;
  } | {
    _key: string;
    _type: "twitter";
    id?: string;
    markDefs: null;
  }> | null;
  featuredArticle: boolean | null;
  estimatedReadingTime: number;
  wordCount: number;
  relatedArticles: Array<{
    _id: string;
    title: string | null;
    publishedAt: string | null;
    mainImage: {
      caption: string | null;
      attribution: string | null;
      crop: SanityImageCrop | null;
      hotspot: SanityImageHotspot | null;
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
    };
    division: {
      name: string | null;
      slug: string | null;
    } | null;
    conferences: Array<{
      shortName: string | null;
      name: string | null;
      slug: string | null;
    }> | null;
    slug: string | null;
    author: {
      name: string | null;
    } | null;
  }>;
} | null;
// Variable: latestDivisionArticlesQuery
// Query: *[_type == "post" && division->name == $division && !(_id in $ids)] | order(publishedAt desc, _updatedAt desc)[0...5] {  _id,  title,  "slug": slug.current,  publishedAt,  "mainImage": {    "caption": mainImage.caption,    "attribution": mainImage.attribution,    "crop": mainImage.crop,    "hotspot": mainImage.hotspot,    "asset": mainImage.asset->,  },  division->{    name,    "slug": slug.current,  },  conferences[]->{    name,    shortName,    "slug": slug.current,  },  "author": author->{name, image, 'slug': slug.current},}
export type LatestDivisionArticlesQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  publishedAt: string | null;
  mainImage: {
    caption: string | null;
    attribution: string | null;
    crop: SanityImageCrop | null;
    hotspot: SanityImageHotspot | null;
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  };
  division: {
    name: string | null;
    slug: string | null;
  } | null;
  conferences: Array<{
    name: string | null;
    shortName: string | null;
    slug: string | null;
  }> | null;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    slug: string | null;
  } | null;
}>;
// Variable: heroArticleQuery
// Query: *[_type == "post" && featuredArticle != true] | order(publishedAt desc) [0] {    _id,  title,  publishedAt,  "mainImage": {    "caption": mainImage.caption,    "attribution": mainImage.attribution,    "crop": mainImage.crop,    "hotspot": mainImage.hotspot,    "asset": mainImage.asset->,  },  division->{    name,    "slug": slug.current,    longName  },  conferences[]->{    _id,    name,    shortName,    "slug": slug.current,  },  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),  "slug": slug.current,  "author": author->{name, 'slug': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},  excerpt,}
export type HeroArticleQueryResult = {
  _id: string;
  title: string | null;
  publishedAt: string | null;
  mainImage: {
    caption: string | null;
    attribution: string | null;
    crop: SanityImageCrop | null;
    hotspot: SanityImageHotspot | null;
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  };
  division: {
    name: string | null;
    slug: string | null;
    longName: string | null;
  } | null;
  conferences: Array<{
    _id: string;
    name: string | null;
    shortName: string | null;
    slug: string | null;
  }> | null;
  estimatedReadingTime: number;
  slug: string | null;
  author: {
    name: string | null;
    slug: string | null;
    archived: boolean | null;
    image: {
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        metadata: SanityImageMetadata | null;
        url: string | null;
      } | null;
    };
  } | null;
  excerpt: string | null;
} | null;
// Variable: recentArticlesQuery
// Query: *[_type == "post" && featuredArticle != true] | order(publishedAt desc, _updatedAt desc)[1..2] {    _id,  title,  publishedAt,  "mainImage": {    "caption": mainImage.caption,    "attribution": mainImage.attribution,    "crop": mainImage.crop,    "hotspot": mainImage.hotspot,    "asset": mainImage.asset->,  },  division->{    name,    "slug": slug.current,    longName  },  conferences[]->{    _id,    name,    shortName,    "slug": slug.current,  },  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),  "slug": slug.current,  "author": author->{name, 'slug': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},  excerpt,}
export type RecentArticlesQueryResult = Array<{
  _id: string;
  title: string | null;
  publishedAt: string | null;
  mainImage: {
    caption: string | null;
    attribution: string | null;
    crop: SanityImageCrop | null;
    hotspot: SanityImageHotspot | null;
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  };
  division: {
    name: string | null;
    slug: string | null;
    longName: string | null;
  } | null;
  conferences: Array<{
    _id: string;
    name: string | null;
    shortName: string | null;
    slug: string | null;
  }> | null;
  estimatedReadingTime: number;
  slug: string | null;
  author: {
    name: string | null;
    slug: string | null;
    archived: boolean | null;
    image: {
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        metadata: SanityImageMetadata | null;
        url: string | null;
      } | null;
    };
  } | null;
  excerpt: string | null;
}>;
// Variable: featuredArticlesQuery
// Query: *[_type == "post" && featuredArticle == true] | order(publishedAt desc, _updatedAt desc)[0..3] {    _id,  title,  publishedAt,  "mainImage": {    "caption": mainImage.caption,    "attribution": mainImage.attribution,    "crop": mainImage.crop,    "hotspot": mainImage.hotspot,    "asset": mainImage.asset->,  },  division->{    name,    "slug": slug.current,    longName  },  conferences[]->{    _id,    name,    shortName,    "slug": slug.current,  },  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),  "slug": slug.current,  "author": author->{name, 'slug': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},  excerpt,}
export type FeaturedArticlesQueryResult = Array<{
  _id: string;
  title: string | null;
  publishedAt: string | null;
  mainImage: {
    caption: string | null;
    attribution: string | null;
    crop: SanityImageCrop | null;
    hotspot: SanityImageHotspot | null;
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  };
  division: {
    name: string | null;
    slug: string | null;
    longName: string | null;
  } | null;
  conferences: Array<{
    _id: string;
    name: string | null;
    shortName: string | null;
    slug: string | null;
  }> | null;
  estimatedReadingTime: number;
  slug: string | null;
  author: {
    name: string | null;
    slug: string | null;
    archived: boolean | null;
    image: {
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        metadata: SanityImageMetadata | null;
        url: string | null;
      } | null;
    };
  } | null;
  excerpt: string | null;
}>;
// Variable: otherArticlesQuery
// Query: *[_type == "post" && featuredArticle != true] | order(publishedAt desc, _updatedAt desc)[3..6] {    _id,  title,  publishedAt,  "mainImage": {    "caption": mainImage.caption,    "attribution": mainImage.attribution,    "crop": mainImage.crop,    "hotspot": mainImage.hotspot,    "asset": mainImage.asset->,  },  division->{    name,    "slug": slug.current,    longName  },  conferences[]->{    _id,    name,    shortName,    "slug": slug.current,  },  "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 ),  "slug": slug.current,  "author": author->{name, 'slug': slug.current, archived, "image": { "asset": image.asset->{_id, _type, metadata, url}}},  excerpt,}
export type OtherArticlesQueryResult = Array<{
  _id: string;
  title: string | null;
  publishedAt: string | null;
  mainImage: {
    caption: string | null;
    attribution: string | null;
    crop: SanityImageCrop | null;
    hotspot: SanityImageHotspot | null;
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  };
  division: {
    name: string | null;
    slug: string | null;
    longName: string | null;
  } | null;
  conferences: Array<{
    _id: string;
    name: string | null;
    shortName: string | null;
    slug: string | null;
  }> | null;
  estimatedReadingTime: number;
  slug: string | null;
  author: {
    name: string | null;
    slug: string | null;
    archived: boolean | null;
    image: {
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        metadata: SanityImageMetadata | null;
        url: string | null;
      } | null;
    };
  } | null;
  excerpt: string | null;
}>;
// Variable: authorBySlug
// Query: *[_type == 'author' && slug.current == $slug && archived == false][0]{      _id,  _updatedAt,  name,  'slug': slug.current,  roles,  image,  biography,  socialMedia  }
export type AuthorBySlugResult = {
  _id: string;
  _updatedAt: string;
  name: string | null;
  slug: string | null;
  roles: Array<"Contributor" | "Correspondent" | "Editor" | "Founder" | "Guest Writer" | "Historian" | "Podcast Host" | "Recruiting Analyst" | "Senior Writer" | "Transfer Portal Analyst"> | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  biography: string | null;
  socialMedia: Array<{
    _key: string;
  } & SocialMedia> | null;
} | null;
// Variable: conferencesAuthorHasWrittenFor
// Query: *[_id == $authorId][0] {  "conferences": array::unique(*[_id in *[_type == "post" && references($authorId)].conferences[]._ref])[] {    _id,    name,    shortName,    "division": division->.name  } | order(name asc)}
export type ConferencesAuthorHasWrittenForResult = {
  conferences: Array<{
    _id: string;
    name: null;
    shortName: null;
    division: null;
  } | {
    _id: string;
    name: Slug | null;
    shortName: null;
    division: null;
  } | {
    _id: string;
    name: string | null;
    shortName: null;
    division: null;
  } | {
    _id: string;
    name: null;
    shortName: null;
    division: string | null;
  } | {
    _id: string;
    name: string | null;
    shortName: string | null;
    division: string | null;
  }>;
} | null;
// Variable: conferencePaths
// Query: *[_type == "conference" && defined(slug.current) && defined(division) && count(*[_type == 'post' && references(^._id)]) > 0]{  "slug": slug.current,  "divisionSlug": division->slug.current,}
export type ConferencePathsResult = Array<{
  slug: string | null;
  divisionSlug: string | null;
}>;
// Variable: authorsForSiteMapQuery
// Query: *[_type == 'author' && defined(slug.current) && archived == false]{  _id,  _updatedAt,  "slug": slug.current,}
export type AuthorsForSiteMapQueryResult = Array<{
  _id: string;
  _updatedAt: string;
  slug: string | null;
}>;
// Variable: transferPortalPlayers
// Query: *[_type == 'transferPortal']{    ...,    "player": player->{      ...    },    "transferringFrom": transferringFrom->{      ...    },    "transferringTo": transferringTo->{      ...    },  }
export type TransferPortalPlayersResult = Array<never>;
// Variable: divisionsQuery
// Query: *[_type == "division" && count(*[_type == 'post' && references(^._id)]) > 0]{  ...,  "slug": slug.current,  "conferences": *[_type == "conference" && division._ref == ^._id && count(*[_type == 'post' && references(^._id)]) > 0]{    ...,    "slug": slug.current,  } | order(name asc)} | order(name desc)
export type DivisionsQueryResult = Array<{
  _id: string;
  _type: "division";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  title?: string;
  heading?: string;
  longName?: string;
  slug: string | null;
  description?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  conferences: Array<{
    _id: string;
    _type: "conference";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    shortName?: string;
    slug: string | null;
    description?: string;
    logo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    division?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "division";
    };
  }>;
}>;
// Variable: openGraphDataBySlug
// Query: *[_type == "post" && slug.current == $slug][0]{  "title": title,  mainImage,  "author": author->{name, roles, image},  "publishedAt": publishedAt,}
export type OpenGraphDataBySlugResult = {
  title: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    attribution?: string;
    _type: "image";
  } | null;
  author: {
    name: string | null;
    roles: Array<"Contributor" | "Correspondent" | "Editor" | "Founder" | "Guest Writer" | "Historian" | "Podcast Host" | "Recruiting Analyst" | "Senior Writer" | "Transfer Portal Analyst"> | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  publishedAt: string | null;
} | null;
// Variable: schoolsByDivision
// Query: *[_type == "school" && division->slug.current == $division && top25VotingEligible != false]| order(shortName asc){  _id,  name,  shortName,  abbreviation,  image,  conference->{    name,    shortName  }}
export type SchoolsByDivisionResult = Array<{
  _id: string;
  name: string | null;
  shortName: string | null;
  abbreviation: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    _type: "image";
  } | null;
  conference: {
    name: string | null;
    shortName: string | null;
  } | null;
}>;
// Variable: schoolsByIdOrderedByRank
// Query: *[_type == "school" && _id in $ids[].id]{  _id,  "_order": $ids[id == ^._id][0].rank,  name,  shortName,  abbreviation,  image,} | order(_order)
export type SchoolsByIdOrderedByRankResult = Array<{
  _id: string;
  _order: unknown | null;
  name: string | null;
  shortName: string | null;
  abbreviation: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    _type: "image";
  } | null;
}>;
// Variable: schoolsByIdOrderedByPoints
// Query: *[_type == "school" && _id in $ids[].id]{  _id,  "_points": $ids[id == ^._id][0].totalPoints,  name,  shortName,  abbreviation,  image,} | order(_points desc)
export type SchoolsByIdOrderedByPointsResult = Array<{
  _id: string;
  _points: unknown | null;
  name: string | null;
  shortName: string | null;
  abbreviation: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    _type: "image";
  } | null;
}>;
// Variable: lastThreePosts
// Query: *[_type == "post"] | order(publishedAt desc)[0...3]{  _id,  title,  publishedAt,  "slug": slug.current,  "author": author->{name},  excerpt,}
export type LastThreePostsResult = Array<{
  _id: string;
  title: string | null;
  publishedAt: string | null;
  slug: string | null;
  author: {
    name: string | null;
  } | null;
  excerpt: string | null;
}>;
// Variable: schoolWithVoteOrder
// Query: *[_type == "school" && _id in $ids[].teamId]{  _id,  "_order": $ids[teamId == ^._id][0].rank,  name,  shortName,  abbreviation,  image,} | order(_order)
export type SchoolWithVoteOrderResult = Array<{
  _id: string;
  _order: unknown | null;
  name: string | null;
  shortName: string | null;
  abbreviation: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    _type: "image";
  } | null;
}>;

// Source: ../web/lib/sanity/query.ts
// Variable: queryPostSlugData
// Query: *[_type == "post" && slug.current == $slug][0]{    ...,    "slug": slug.current,      division->{    _id,    name,    "slug": slug.current,    logo{      ...,      "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),      "blurData": asset->metadata.lqip,      "dominantColor": asset->metadata.palette.dominant.background,    }  },      conferences[]->{    _id,    name,    shortName,    "slug": slug.current,    logo{      ...,      "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),      "blurData": asset->metadata.lqip,      "dominantColor": asset->metadata.palette.dominant.background,    }  },      authors[]->{    _id,    name,    roles,      image{    ...,    "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  }  },      mainImage{    ...,    "alt": coalesce(asset->altText, asset->originalFilename, "Image-Broken"),    "blurData": asset->metadata.lqip,    "dominantColor": asset->metadata.palette.dominant.background,  },      body[]{    ...,      markDefs[]{    ...,    _type == "internalLink" => {      ...,      "href": select(        reference->_type == "division" => "/news/" + reference->slug.current,        reference->_type == "conference" => "/news/" + reference->division->slug.current + "/" + reference->slug.current,        reference->_type == "article" => "/" + reference->slug.current,        "#"      )    }  }  }  }
export type QueryPostSlugDataResult = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  authors: Array<{
    _id: string;
    name: string | null;
    roles: Array<"Contributor" | "Correspondent" | "Editor" | "Founder" | "Guest Writer" | "Historian" | "Podcast Host" | "Recruiting Analyst" | "Senior Writer" | "Transfer Portal Analyst"> | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      alt: string | "Image-Broken";
      blurData: string | null;
      dominantColor: string | null;
    } | null;
  }> | null;
  publishedAt?: string;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    attribution?: string;
    _type: "image";
    alt: string | "Image-Broken";
    blurData: string | null;
    dominantColor: string | null;
  } | null;
  sport?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sport";
  };
  division: {
    _id: string;
    name: string | null;
    slug: string | null;
    logo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string | "Image-Broken";
      _type: "image";
      blurData: string | null;
      dominantColor: string | null;
    } | null;
  } | null;
  conferences: Array<{
    _id: string;
    name: string | null;
    shortName: string | null;
    slug: string | null;
    logo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt: string | "Image-Broken";
      _type: "image";
      blurData: string | null;
      dominantColor: string | null;
    } | null;
  }> | null;
  teams?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "school";
  }>;
  tags?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tag";
  }>;
  featuredArticle?: boolean;
  excerpt?: string;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs: Array<{
      reference?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "conference";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "division";
      } | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "post";
      };
      _type: "internalLink";
      _key: string;
      href: string | "#" | null;
    } | {
      href?: string;
      blank?: boolean;
      _type: "link";
      _key: string;
    }> | null;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    attribution?: string;
    _type: "image";
    _key: string;
    markDefs: null;
  } | {
    _key: string;
    _type: "table";
    rows?: Array<{
      _key: string;
    } & TableRow>;
    markDefs: null;
  } | {
    _key: string;
    _type: "top25Table";
    votes?: Array<{
      voterName?: string;
      voterAffiliation?: string;
      teams?: Array<{
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "school";
      }>;
      _key: string;
    }>;
    markDefs: null;
  } | {
    _key: string;
    _type: "twitter";
    id?: string;
    markDefs: null;
  }> | null;
  seoTitle?: string;
  seoDescription?: string;
  seoImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  seoNoIndex?: boolean;
  seoHideFromLists?: boolean;
  ogTitle?: string;
  ogDescription?: string;
} | null;
// Variable: queryFooterData
// Query: *[_type == "footer" && _id == "footer"][0]{    _id,    subtitle,    columns[]{      _key,      title,      links[]{        _key,        name,        "openInNewTab": url.openInNewTab,        "href": select(          url.type == "internal" && url.internalType == "reference" => url.internal->slug.current,          url.type == "internal" && url.internalType == "custom" => url.internalUrl,          url.type == "external" => url.external,          url.href        )      }    },    "logo": *[_type == "settings"][0].logo.asset->url + "?w=80&h=40&dpr=3&fit=max",    "siteTitle": *[_type == "settings"][0].siteTitle,    "socialLinks": *[_type == "settings"][0].socialLinks,  }
export type QueryFooterDataResult = {
  _id: string;
  subtitle: string | null;
  columns: Array<{
    _key: string;
    title: string | null;
    links: Array<{
      _key: string;
      name: string | null;
      openInNewTab: boolean | null;
      href: string | null;
    }> | null;
  }> | null;
  logo: string | null;
  siteTitle: string | null;
  socialLinks: {
    twitter?: string;
    facebook?: string;
    youtube?: string;
  } | null;
} | null;

